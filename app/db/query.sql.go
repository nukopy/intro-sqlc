// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :one
insert into author (id, name)
values ($1, $2)
returning id, name, created_at
`

type CreateAuthorParams struct {
	ID   int32
	Name string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.ID, arg.Name)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
delete from author
where id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
select id, name, created_at
from author
where id = $1
limit 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
select id, name, created_at
from author
order by id
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookOverPrice = `-- name: ListBookOverPrice :many
select b.title,
    a.name,
    b.price
from book b
    left join author a on 1 = 1
    and b.author_id = a.id
where price > $1
order by b.title
`

type ListBookOverPriceRow struct {
	Title string
	Name  sql.NullString
	Price int32
}

func (q *Queries) ListBookOverPrice(ctx context.Context, price int32) ([]ListBookOverPriceRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookOverPrice, price)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookOverPriceRow
	for rows.Next() {
		var i ListBookOverPriceRow
		if err := rows.Scan(&i.Title, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
